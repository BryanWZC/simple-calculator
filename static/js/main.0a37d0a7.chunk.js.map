{"version":3,"sources":["table.js","App.js","serviceWorker.js","index.js"],"names":["Table","nextProps","nextState","history","this","props","historyArr","length","map","value","i","key","Math","random","toString","id","className","heading","displayHistory","React","Component","App","state","toEvaluate","switch","handleClick","bind","handleEquals","handleClear","handleKeyDown","handleOperator","handleBack","document","addEventListener","removeEventListener","event","target","setState","innerHTML","concat","evaluateF","evaluate","toFixed","slice","e","alert","keyCode","String","fromCharCode","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a37d0a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './table.css';\r\n\r\n// To be rendered to App\r\nclass Table extends React.Component{\r\n  // Only update if props have changed\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return nextProps.history !== this.props.history\r\n  }\r\n  \r\n  //Function that takes an array and returns JSX of calculation history based on passed props called'history\r\n  displayHistory(historyArr){\r\n      if(historyArr.length > 0) {\r\n        return historyArr.map((value,i) => {\r\n         return <div key = {Math.random().toString()+i} id = {'value'+i} className = 'container'>\r\n            <h1>{value}</h1>\r\n          </div>\r\n        }\r\n      )}\r\n  }\r\n\r\n  // Renders heading only if there is more than 0 elements in this.props.history\r\n  heading (){\r\n    if(this.props.history.length > 0){return <h1 id = 'heading'>History:</h1>}\r\n  }\r\n\r\n  render(){\r\n    \r\n    return(\r\n      <div id='history'>\r\n        {this.heading()}\r\n        {this.displayHistory(this.props.history)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table","import React, {Component} from 'react';\nimport './App.css';\nimport {evaluate} from 'mathjs';\nimport Table from './table';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      // Expression to be evaluated by Mathjs library function\n      toEvaluate: '0',\n      // For \n      switch: false,\n      history: [],\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleEquals = this.handleEquals.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleOperator = this.handleOperator.bind(this);\n    this.handleBack = this.handleBack.bind(this);\n  }\n  // Listens for keydown events after components mounted\n  componentDidMount(){\n    document.addEventListener('keydown',this.handleKeyDown);\n  }\n  componentWillUnmount(){\n    document.removeEventListener('keydown',this.handleKeyDown);\n  }\n  //Handle switch for numbers\n  handleClick(event) {\n    let target = event.target;\n    if (this.state.toEvaluate === '0' && target.className === 'num-button'){\n      this.setState({toEvaluate: target.innerHTML});\n    } else {\n        if (this.state.switch === true){\n          this.setState({toEvaluate: target.innerHTML});\n          this.setState({switch: false});\n        } else {\n          this.setState({toEvaluate: this.state.toEvaluate.concat(target.innerHTML)});\n        }\n    }\n  }\n  // Handle switch for operators\n  handleOperator(event){\n    let target = event.target;\n    this.setState({switch: false});\n    this.setState({toEvaluate: this.state.toEvaluate.concat(target.innerHTML)});\n  }\n  // Method for equals sign for calculator\n  handleEquals(){\n    // Sets switch state to true so that we know to reset if number is pressed next or not if operator is pressed next\n    this.setState({switch: true});\n    // Using evaluate from Mathjs, if evaluation has more than 8 figures, it shall be reduced to 8\n    try {\n      let evaluateF = evaluate(this.state.toEvaluate);\n      evaluateF.length > 8 ?\n        evaluateF = evaluateF.toFixed(8).toString():\n        evaluateF = evaluateF.toString();\n      this.setState({toEvaluate: evaluateF})\n      // Current evaluation to be stored in array to be fed into Table as props\n      this.state.history.length < 5 ?\n        this.setState({history: [evaluateF,...this.state.history]}):\n        this.setState({history: [evaluateF, ...this.state.history.slice(0,-1)]});\n    } catch(e) {\n      this.setState({toEvaluate:'0'});\n      alert('ERROR TRY AGAIN');\n    }\n    \n  }\n\n  // Handles resetting the calculator\n  handleClear(){\n    this.setState({toEvaluate:'0'});\n  }\n\n  // Handles taking 'toEvaluate' and reducing it by the last most string index. If length is one, resets to '0'\n  handleBack(){\n    (this.state.toEvaluate).length > 1 ?\n      this.setState({toEvaluate: this.state.toEvaluate.slice(0,-1)}):\n      this.handleClear();\n  }\n\n  // Method allows for keydown responses for user convenience \n  handleKeyDown(e) {\n    let key = e.keyCode;\n    // For numbers 0-9 not on number pad\n    if (key >= 48 && key <= 57){\n      if (this.state.toEvaluate === '0' || this.state.switch === true){\n        this.setState({toEvaluate: String.fromCharCode(e.keyCode)})\n        this.setState({switch: false});\n      } else {\n        this.setState({toEvaluate: this.state.toEvaluate.concat(String.fromCharCode(e.keyCode))});\n      }\n    } \n    // For numbers 0-9 on number pad\n    if(key >= 96 && key <= 105) {\n      if (this.state.toEvaluate === '0' || this.state.switch === true){\n        this.setState({toEvaluate: String.fromCharCode(e.keyCode - 48)})\n        this.setState({switch: false});\n      } else {\n        this.setState({toEvaluate: this.state.toEvaluate.concat(String.fromCharCode(e.keyCode - 48))});\n      }   \n    } \n    this.setState({switch: false});\n    // For '-'\n    if(key === 109 || key === 189){\n      this.setState({toEvaluate: this.state.toEvaluate.concat(String.fromCharCode(45))});\n    } \n    //For '*'\n    if(key === 106){\n      this.setState({toEvaluate: this.state.toEvaluate.concat(String.fromCharCode(42))});\n    }\n    // For '/'\n    if(key === 111 || key === 191){\n      this.setState({toEvaluate: this.state.toEvaluate.concat(String.fromCharCode(47))});\n    }\n    // For '.'\n    if(key === 110 || key === 190){\n      if (this.state.toEvaluate.slice(-1) !==  '.') {\n        this.setState({toEvaluate: this.state.toEvaluate.concat(String.fromCharCode(46))});\n        }\n    }\n    // For '+'\n    if(key === 107){\n      this.setState({toEvaluate: this.state.toEvaluate.concat(String.fromCharCode(43))});\n    }\n    // For 'enter' or '='\n    if(key === 13 || key === 187){\n      this.handleEquals();\n    }\n    // Clear on 'C'\n    if(key === 67){\n      this.handleClear();\n    }\n    if(key === 8){\n      this.handleBack();\n    }\n  }\n\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <div id = 'calculator'>\n          <div id = 'display-wrapper'>\n            <h1 id='display'>{this.state.toEvaluate}</h1>\n          </div>\n          <div id='button-wrapper'>\n            <div id = 'number-pad'>\n              <button id='one' className = 'num-button' onClick = {this.handleClick}>1</button>\n              <button id='two' className = 'num-button' onClick = {this.handleClick}>2</button>\n              <button id='three'className = 'num-button'  onClick = {this.handleClick}>3</button>\n              <button id='four' className = 'num-button' onClick = {this.handleClick}>4</button>\n              <button id='five' className = 'num-button' onClick = {this.handleClick}>5</button>\n              <button id='six' className = 'num-button' onClick = {this.handleClick}>6</button>\n              <button id='seven' className = 'num-button' onClick = {this.handleClick}>7</button>\n              <button id='eight' className = 'num-button' onClick = {this.handleClick}>8</button>\n              <button id='nine' className = 'num-button' onClick = {this.handleClick}>9</button>\n              <button id='zero' className = 'num-button' onClick = {this.handleClick}>0</button>\n            </div>\n              <div id = 'operator-pad'>\n                <button id='clear' className = 'op-button' onClick = {this.handleClear}>AC</button>\n                <button id='back' className = 'op-button' onClick = {this.handleBack}>&lt;&lt;</button>\n                <button id='add' className = 'op-button' onClick = {this.handleOperator}>+</button>\n                <button id='subtract' className = 'op-button' onClick = {this.handleOperator}>-</button>\n                <button id='multiply' className = 'op-button' onClick = {this.handleOperator}>*</button>\n                <button id='divide' className = 'op-button' onClick = {this.handleOperator}>/</button>\n                <button id='decimal' className = 'op-button' onClick = {this.handleOperator}>.</button>\n                <button id='equals' className = 'op-button' onClick = {this.handleEquals}>=</button>\n              </div>\n          </div>\n        </div>\n        <Table history = {this.state.history} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}